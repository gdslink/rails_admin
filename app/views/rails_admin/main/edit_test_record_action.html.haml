-full_collection = []
-field_collection = []
-field_hash = Hash.new
-Field.where(table_id: [nil, ""]).each do |field|
  -field_collection.push( field.name )
  -full_collection.push( field.name )
  -field_hash[field.name] = field.field_type

-table_collection = []
-table_field_hash = Hash.new
-Table.all.each do |table|
  -table_collection.push(table.name)
  -full_collection.push( table.name )
  -table_fields = Field.where(:table_id => table.id)
  -table_field_hash[table.name] = Hash.new
  -table_fields.each do |tab_field|
    -table_field_hash[table.name][tab_field.name] = tab_field.field_type

-editTemplateName = @object.template_name
-editSelectedFields = JSON.parse(@object.selected_fields).sort
-editFieldInputs = @object.selected_inputs
-editDropdowns = @object.selected_dropdowns
-editNumberOfRecords = @object.number_of_records
-editSeperators = @object.selected_seperators
-editSelectedTables = JSON.parse(@object.selected_tables).sort

-full_collection = full_collection.reject {|w| editSelectedFields.include? w}

= form_tag('/admin/test_record/test_record_action?'+'Application='+params[:Application]+'&Company='+params[:Company]+'&locale=en', method: :put, :class => "form-horizontal denser") do
  %fieldset
    <span class="col-sm-2" > <label class="control-label" for="fieldSelect" style="float: right;" >Template Name</label> </span><span class="col-sm-1" , id="padding_span", style="padding-right:0px;"></span>
    %input{:type => "text", :id => "templateName", :name => "templateName", :style => "width: 25%;", :value => editTemplateName}
    %br
    %br
    <span class="col-sm-2" > <label class="control-label" for="fieldSelect" style="float: right;" >Select Fields</label> </span><span class="col-sm-1" , id="padding_span", style="padding-right:0px;"></span>
    %div{:class => "col-sm-9", :style => "padding-bottom: 1%;"}
      %div{:class => "form-group control-group has_and_belongs_to_many_association_type roles_field"}
        =select "", "fieldSelect", full_collection, { id: "fieldSelect", name: "fieldSelect", selected: [171] }, {data: { filteringmultiselect: true  }, multiple: true}
    %fieldset
      %legend Fields
      %div{:class => "col-sm-10", :style => "display: grid; grid-template-columns: 1fr 5fr; grid-row-gap: 5px; margin-top: 1%;"}
    %fieldset
      %legend Tables
      %div{:class => "col-sm-11", :style => "display: grid; grid-template-columns: 1fr 5fr; grid-row-gap: 5px; margin-top: 1%;"}
    %br
    %label{:for => "numOfRecordsInput"}Number of records to generate:
    %input{:type => "number", :id => "numOfRecordsInput", :name => "numOfRecordsInput", :min => 1, :value => editNumberOfRecords}
    %button{:type => "button", :id => "genRecordBut", :name => "genRecordBut", :onclick => "genRecords();"}Generate Records
    %input{:type => "hidden", :id => "genRecordInput", :name => "genRecordInput"}
    %input{:type => "hidden", :id => "previousSelectedFields", :name => "previousSelectedFields", :value => editSelectedFields}
  = render "rails_admin/main/bulk_properties_submit_buttons"

%script#formControls
  :plain
    var rubyModel = "none";
    var fieldTypeJson = #{ field_hash.to_json };
    var fieldArrayNames = #{ field_collection.to_json };
    var tableArrayNames = #{ table_collection.to_json };
    var tableFieldArrayNames = #{ table_field_hash.to_json };

    var editSelectedFields = #{ editSelectedFields };
    var editDropdowns = #{ editDropdowns };
    var editInputFields = #{ editFieldInputs };
    var editSeperators = #{ editSeperators };
    var editSelectedTables = #{ editSelectedTables };

    function genRecords()
    {
      genRecInp = document.getElementById("genRecordInput");
      genRecInp.value = "Yes";
      $.ajax({
        type: "PUT",
        data: $(".form-horizontal.denser").serialize(),
        async: false,
        url: "/admin/test_record/test_record_action",
        success: function() {
          alert("Records were generated");
        }
      });
      genRecInp.value = "No";
    }

    function selectChanged(value, option, fieldInput)
    {
      if(value == "Value from list")
      {
        dd = document.getElementById(option + "_dropdown");
        var seperatorP = document.createElement("p");
        seperatorP.innerHTML = "Seperator :";
        seperatorP.style.display = "contents";
        seperatorP.id = option + "_sep_p";
        dd.insertAdjacentElement("afterend", seperatorP);
        var seperatorInput = document.createElement("input");
        seperatorInput.type = "text";
        seperatorInput.id = option + "_seperator";
        seperatorInput.name = option + "_seperator";
        seperatorInput.style.width = "20%";
        seperatorP.insertAdjacentElement("afterend", seperatorInput);
        fieldInput.readOnly = false;
      }
      if(value == "Random value")
      {
        if(document.getElementById(option + "_sep_p"))
        {
          currentSepP = document.getElementById(option + "_sep_p");
          currentSepP.remove();
          currentSepInput = document.getElementById(option + "_seperator");
          currentSepInput.remove();
        }
        fieldInput.readOnly = true;
        fieldInput.value = '';
      }
      if(value == "Defined value")
      {
        if(document.getElementById(option + "_sep_p"))
        {
          currentSepP = document.getElementById(option + "_sep_p");
          currentSepP.remove();
          currentSepInput = document.getElementById(option + "_seperator");
          currentSepInput.remove();
        }
        fieldInput.readOnly = false;
      }
    }

    function createLabsAndCustomInputs(options, fieldDiv, tableDiv){
      for(var i=0; i < options.length; i++)
      {
        if(!document.getElementById(options[i].value) && !document.getElementById("field_" + options[i].value))
        {
          //Create Fields
          if(fieldArrayNames.includes(options[i].value))
          {
            var fieldElement = document.createElement("label");
            fieldElement.style.display = "contents";
            fieldElement.innerHTML = options[i].value;
            fieldElement.id = "field_" + options[i].value;
            fieldDiv.appendChild(fieldElement);
            fieldType = fieldTypeJson[options[i].value]

            var fieldInput = document.createElement("input");
            fieldInput.type = "text";
            fieldInput.id = "field_" + options[i].value + "_input";
            fieldInput.name = "field_" + options[i].value + "_input";
            fieldInput.readOnly = true;
            fieldDiv.appendChild(fieldInput);

            brEle = document.createElement("br");
            fieldDiv.appendChild(brEle);
            var emptyDiv = document.createElement("div");
            emptyDiv.innerHTML = "&nbsp;";
            fieldDiv.appendChild(emptyDiv);
            var dropdown = document.createElement("select");
            dropdown.classList.add("fieldDropdown");
            dropdown.id = "field_" + options[i].value + "_dropdown";
            dropdown.name = "field_" + options[i].value + "_dropdown";
            dropdownValue = options[i].value;
            dropdown.onchange = function () {
              selectChanged(this.value, document.getElementById(this.name.substr(0, this.name.length - 9)).id, document.getElementById(this.name.substr(0, this.name.length - 9) + "_input"));
            }
            fieldDiv.appendChild(dropdown);
            var randomVal = document.createElement("option");
            randomVal.text = "Random value";
            var definedVal = document.createElement("option");
            definedVal.text = "Defined value";
            var valFromList = document.createElement("option");
            valFromList.text = "Value from list";
            dropdown.appendChild(randomVal);
            dropdown.appendChild(definedVal);
            dropdown.appendChild(valFromList);
            fieldDiv.appendChild(brEle);
          }
          //Create Tables
          if(tableArrayNames.includes(options[i].value))
          {
            var fieldElement = document.createElement("label");
            fieldElement.style.display = "contents";
            fieldElement.innerHTML = options[i].value;
            fieldElement.id = options[i].value;
            tableDiv.appendChild(fieldElement);
            fieldType = fieldTypeJson[options[i].value];

            var iterationDiv = document.createElement("div");
            var numberOfItElement = document.createElement("p");
            numberOfItElement.innerHTML = "Number of table iterations:  between"
            numberOfItElement.style.display = "contents";
            iterationDiv.appendChild(numberOfItElement);

            var firstNumberInput = document.createElement("input");
            firstNumberInput.type = "number";
            firstNumberInput.min = "1";
            firstNumberInput.value = "1";
            firstNumberInput.id = options[i].value + "iteration_input";
            firstNumberInput.name = options[i].value + "iteration_input";
            iterationDiv.appendChild(firstNumberInput);

            var andElement = document.createElement("p");
            andElement.innerHTML = " and ";
            andElement.style.display = "contents";
            iterationDiv.appendChild(andElement);

            var secondNumberInput = document.createElement("input");
            secondNumberInput.type = "number";
            secondNumberInput.min = "1";
            secondNumberInput.value = "1";
            secondNumberInput.id = options[i].value + "second_iteration_input";
            secondNumberInput.name = options[i].value + "second_iteration_input";
            iterationDiv.appendChild(secondNumberInput);

            tableDiv.appendChild(iterationDiv);

            brEle = document.createElement("br");
            tableDiv.appendChild(brEle);

            currentTableFields = tableFieldArrayNames[options[i].value]
            for(field in currentTableFields)
            {
              var fieldElement = document.createElement("label");
              fieldElement.style.display = "contents";
              fieldElement.innerHTML = field;
              fieldElement.id = "table_" + options[i].value + "_" + field;
              tableDiv.appendChild(fieldElement);
              fieldType = currentTableFields[field];
              var fieldInput = document.createElement("input");
              fieldInput.type = "text";
              fieldInput.id = "table_" + options[i].value + "_field_" + field + "_input";
              fieldInput.name = "table_" + options[i].value + "_field_" + field + "_input";
              fieldInput.readOnly = true;
              tableDiv.appendChild(fieldInput);
              
              brEle = document.createElement("br");
              tableDiv.appendChild(brEle);
              var emptyDiv = document.createElement("div");
              emptyDiv.innerHTML = "&nbsp;";
              tableDiv.appendChild(emptyDiv);
              var dropdown = document.createElement("select");
              dropdown.classList.add("fieldDropdown");
              dropdown.id = "table_" + options[i].value + "_field_" + field + "_dropdown";
              dropdown.name = "table_" + options[i].value + "_field_" + field + "_dropdown";
              dropdownValue = options[i].value;
              dropdown.onchange = function () {
                selectChanged(this.value, this.name.substr(0, this.name.length - 9), document.getElementById(this.name.substr(0, this.name.length - 9) + "_input"));
              }
              tableDiv.appendChild(dropdown);
              var randomVal = document.createElement("option");
              randomVal.text = "Random value";
              var definedVal = document.createElement("option");
              definedVal.text = "Defined value";
              var valFromList = document.createElement("option");
              valFromList.text = "Value from list";
              dropdown.appendChild(randomVal);
              dropdown.appendChild(definedVal);
              dropdown.appendChild(valFromList);
              tableDiv.appendChild(brEle);
            }
          }
        }
      }
      drops = document.getElementsByClassName("fieldDropdown");
      for (var i = 0; i < drops.length; i++){
        drops[i].style.width = "20%";
      }
    }
    document.addEventListener("DOMContentLoaded", function(event){
      searchBar = document.getElementsByClassName("form-control ra-multiselect-search")[0];
      searchBar.placeholder = "";
      //Add in selected fields in the right side for edit section
      document.getElementsByClassName("controls col-sm-10")[0].style.width = "100%";
      document.getElementsByClassName("col-sm-2 control-label")[0].remove();
      document.getElementsByClassName("form-group form-actions model_name_test_record")[0].remove();
      editRightMulti = document.getElementsByClassName("ra-multiselect-column ra-multiselect-right")[0].children[0].children[0];
      editFieldDiv = document.getElementsByClassName("col-sm-10")[1];
      editTableDiv = document.getElementsByClassName("col-sm-11")[0];
      for(var i = 0; i < editSelectedFields.length; i++)
      {
        if(editSelectedFields[i] != "")
        {
          var opt = editSelectedFields[i];
          var el = document.createElement("option");
          el.textContent = opt;
          el.value = opt;
          editRightMulti.appendChild(el);
        }
      }
      createLabsAndCustomInputs(editRightMulti.options, editFieldDiv, editTableDiv);

      //Change table iterations


      //Change the selected fields to what they were saved to
      for(var key in editDropdowns)
      {
        var value = editDropdowns[key];
        drop = document.getElementById(key);
        if(value == "Defined value")
        {
          drop.selectedIndex = 1;
          drop.onchange();
          inputKey = key.slice(0, -9);
          inputValue = editInputFields[inputKey + "_input"];
          inputField = document.getElementById(inputKey + "_input");
          inputField.value = inputValue;
        }
        else if(value == "Value from list")
        {
          drop.selectedIndex = 2;
          drop.onchange();
          inputKey = key.slice(0, -9);
          inputValue = editInputFields[inputKey + "_input"];
          inputField = document.getElementById(inputKey + "_input");
          inputField.value = inputValue;
          seperatorValue = editSeperators[inputKey + "_seperator"];
          seperatorField = document.getElementById(inputKey + "_seperator");
          seperatorField.value = seperatorValue;
        }
      }

      for(var i = 0; i < editSelectedTables.length; i++)
      {
        tableIteration1 = document.getElementById(editSelectedTables[i] + "iteration_input");
        tableIteration1.value = editInputFields[editSelectedTables[i] + "iteration_input"];
        tableIteration2 = document.getElementById(editSelectedTables[i] + "second_iteration_input");
        tableIteration2.value = editInputFields[editSelectedTables[i] + "second_iteration_input"];
      }

    	document.getElementsByClassName("ui-icon ui-icon-circle-triangle-e ra-multiselect-item-add")[0].onclick = function(){
        rightMulti = document.getElementsByClassName("ra-multiselect-column ra-multiselect-right")[0];
        rightSelect = rightMulti.getElementsByClassName("form-control ra-multiselect-selection")[0];
        fieldDiv = document.getElementsByClassName("col-sm-10")[1];
        tableDiv = document.getElementsByClassName("col-sm-11")[0];
        options = rightSelect.options;
        createLabsAndCustomInputs(options, fieldDiv, tableDiv);
      }

      document.getElementsByClassName("ui-icon ui-icon-circle-triangle-w ra-multiselect-item-remove")[0].onclick = function(){
        rightMulti = document.getElementsByClassName("ra-multiselect-column ra-multiselect-right")[0];
        rightSelect = rightMulti.getElementsByClassName("form-control ra-multiselect-selection")[0];
        fieldDiv = document.getElementsByClassName("col-sm-10")[1];
        fieldDiv.innerHTML = '';
        tableDiv = document.getElementsByClassName("col-sm-11")[0];
        tableDiv.innerHTML = '';
        options = rightSelect.options;
        createLabsAndCustomInputs(options, fieldDiv, tableDiv);
      }

      document.getElementsByClassName("ra-multiselect-item-add-all")[0].onclick = function(){
        rightMulti = document.getElementsByClassName("ra-multiselect-column ra-multiselect-right")[0];
        rightSelect = rightMulti.getElementsByClassName("form-control ra-multiselect-selection")[0];
        fieldDiv = document.getElementsByClassName("col-sm-10")[1];
        tableDiv = document.getElementsByClassName("col-sm-11")[0];
        options = rightSelect.options;
        createLabsAndCustomInputs(options, fieldDiv, tableDiv);
      }

      document.getElementsByClassName("ra-multiselect-item-remove-all")[0].onclick = function(){
        rightMulti = document.getElementsByClassName("ra-multiselect-column ra-multiselect-right")[0];
        rightSelect = rightMulti.getElementsByClassName("form-control ra-multiselect-selection")[0];
        fieldDiv = document.getElementsByClassName("col-sm-10")[1];
        fieldDiv.innerHTML = '';
        tableDiv = document.getElementsByClassName("col-sm-11")[0];
        tableDiv.innerHTML = '';
        options = rightSelect.options;
        createLabsAndCustomInputs(options, fieldDiv, tableDiv);
      }
    });