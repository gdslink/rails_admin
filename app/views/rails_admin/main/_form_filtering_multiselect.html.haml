:ruby
  related_id = params[:associations] && params[:associations][field.name.to_s]
  config = field.associated_model_config
  source_abstract_model = RailsAdmin.config(form.object.class).abstract_model
  unscoped ||= false
  sorted ||= false
  exclude_current ||= false
  if unscoped then
    unscoped_param="&scope=nil"
    else
    unscoped_param=""
  end

  if sorted != false then
    sorted_param="&sort="+sorted
    else
    sorted_param=""
  end

  if form.object.new_record? && related_id.present? && related_id != 'new'
    selected = [config.abstract_model.get(related_id)]
  else
    selected = form.object.send(field.name)
  end
  selected_ids = selected.map{|s| s.send(field.associated_primary_key)}

  current_action = params[:action].in?(['create', 'new']) ? 'create' : 'update'

  xhr = !field.associated_collection_cache_all

  collection = if xhr
    selected.map { |o| [o.send(field.associated_object_label_method), o.send(field.associated_primary_key)] }
  else
    i = 0
    controller.list_entries(config, :list_assoc, field.associated_collection_scope, false).map { |o| [o.send(field.associated_object_label_method), o.send(field.associated_primary_key)] }.sort_by {|a| [selected_ids.index(a[1]) || selected_ids.size, i+=1] }
  end
  
  if form.object.respond_to?(:parents)
    parents_id = form.object.parents.map{ |p| p.id }
    collection.reject! do |obj|
      parents_id.index(obj[1]) != nil
    end
  end

  if exclude_current
    collection.reject! do |obj|
      obj[1] == form.object.id
    end
  end

  js_data = {
    xhr: xhr,
    :'edit-url' => (authorized?(:edit, config.abstract_model) ? edit_path(model_name: config.abstract_model.to_param, id: '__ID__') : ''),
    remote_source: index_path(config.abstract_model, source_object_id: form.object.id, source_abstract_model: source_abstract_model.to_param, associated_collection: field.name, current_action: current_action, compact: true)+unscoped_param+sorted_param,
    sortable: !!field.orderable,
    removable: !!field.removable,
    cacheAll: !!field.associated_collection_cache_all,
    regional: {
      chooseAll: t("admin.misc.chose_all"),
      chosen: t("admin.misc.chosen", name: config.label_plural),
      clearAll: t("admin.misc.clear_all"),
      search: t("admin.misc.search"),
      up: t("admin.misc.up"),
      down: t("admin.misc.down")
    }
  } 

%input{name: form.dom_name(field), type: "hidden", value: ""}

- rubyModel = params[:model_name]
- if rubyModel == "filter" && params[:action] == "edit"
  - id = params[:id]
  - jsonFsf = []
  - filterScreenFlows = FilterScreenFlow.where(filter_id: id)
  - filterScreenFlows.each do |fsf|
    - concat = "name:"+fsf.name+","+"read_only:"+fsf.sf_read_only.to_s
    - actualJson = {'name'=>fsf.name, 'read_only'=>fsf.sf_read_only}
    - jsonFsf.push(actualJson)

- selected_ids = (hdv = field.form_default_value).nil? ? selected_ids : hdv
= form.select field.method_name, collection, { selected: selected_ids, object: form.object }, field.html_attributes.reverse_merge({data: { filteringmultiselect: true, options: js_data.to_json }, multiple: true})
- if authorized?(:new, config.abstract_model) && field.inline_add
  - path_hash = { model_name: config.abstract_model.to_param, modal: true }
  - path_hash.merge!({ associations: { field.inverse_of => (form.object.persisted? ? form.object.id : 'new') } }) if field.inverse_of
  = link_to "<i class=\"icon-plus icon-white\"></i> ".html_safe + wording_for(:link, :new, config.abstract_model), '#', data: { link: new_path(path_hash) }, class: "create btn btn-info", style: 'margin-left:10px'

:javascript
  rubyModel = "#{rubyModel}";
  console.log(rubyModel);
  jsonFsf = #{jsonFsf.to_json};
  console.log(jsonFsf);

%script#addToRight
  :plain
    function selectLi(el)
    {
      console.log("addtoright");
      if ($(el).css( "background-color" )=="rgb(204, 204, 204)"){
        $(el).css( "background-color", "white");
        $(el).attr('selected',false);
      } 
      else {
        $(el).css("background-color", "#ccc");
        $(el).attr('selected',true);
        $("#unorderedRight li").each(function(i, obj)
        {
          if($(obj).attr('selected') == 'selected' && obj !== el)
          {
          $(obj).attr('selected', false);
          $(obj).css( "background-color", "white");
          }
        });
      }
    }